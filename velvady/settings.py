"""
Django settings for velvady project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import dj_database_url
from dotenv import load_dotenv
load_dotenv()
import os





# =======================================================
# BASE DIRECTORY
# =======================================================

# I am using BASE_DIR to construct full paths relative to the project root
BASE_DIR = Path(__file__).resolve().parent.parent





# =======================================================
# DEVELOPMENT MODE SETTINGS
# =======================================================

# WARNING: Do not use DEBUG or this key in production
DEBUG = True
SECRET_KEY = "django-insecure-y*=bo#@*w%d%mnv6lnq4m#t%7vp1v#xq^v6m%=v&%83m0f1-rk"
ALLOWED_HOSTS = []





# =======================================================
# INSTALLED APPLICATIONS
# =======================================================

# These are the built-in Django apps and custom apps used in this project
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Custom project apps
    "core",
    "accounts",
    "products",
]

# I am setting Django to use my custom user model from the 'accounts' app
AUTH_USER_MODEL = 'accounts.CustomUser'





# =======================================================
# MIDDLEWARE CONFIGURATION
# =======================================================

# Middleware is used to process requests globally before reaching a view
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]





# =======================================================
# URL CONFIGURATION
# =======================================================

# The root URLConf points to the top-level routing file
ROOT_URLCONF = "velvady.urls"





# =======================================================
# TEMPLATE CONFIGURATION
# =======================================================

# Django will load HTML templates from all app directories
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # No custom template folders needed for now
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]





# =======================================================
# WSGI CONFIGURATION
# =======================================================

# This sets the entry point for running the project via WSGI server
WSGI_APPLICATION = "velvady.wsgi.application"





# =======================================================
# DATABASE CONFIGURATION
# =======================================================

# Use SQLite by default for development and testing
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# If a DATABASE_URL is defined in the environment, use it instead (e.g. for PostgreSQL on Heroku)
if os.environ.get("DATABASE_URL"):
    DATABASES["default"] = dj_database_url.parse(os.environ.get("DATABASE_URL"))





# =======================================================
# PASSWORD VALIDATION FOR USER SECURITY
# =======================================================

# I am enforcing strong password rules for the site to meet MP4 distinction-level security expectations
# These validators ensure the password is not too short, not too common, and not entirely numeric
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 12},  # I have raised the minimum length to 12 characters for added security
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]





# =======================================================
# INTERNATIONALISATION SETTINGS
# =======================================================

# I am keeping default English and UTC time zone for a UK-based project
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True





# =======================================================
# STATIC FILES CONFIGURATION
# =======================================================

# Static files such as CSS and JavaScript are served from this URL
STATIC_URL = "static/"





# =======================================================
# PRIMARY KEY FIELD TYPE
# =======================================================

# I am setting the default type for primary keys on all models
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"





# =======================================================
# SESSION SECURITY SETTINGS
# =======================================================

# I am limiting session lifetime to 30 minutes of inactivity to protect user data
SESSION_COOKIE_AGE = 1800  # 30 minutes in seconds

# This setting ensures users are logged out when they close the browser
SESSION_EXPIRE_AT_BROWSER_CLOSE = True





# =======================================================
# LOGIN / LOGOUT REDIRECTION
# =======================================================

# After login, redirect user to dashboard
LOGIN_REDIRECT_URL = '/accounts/dashboard/'

# Optional: Where to redirect after logout
LOGOUT_REDIRECT_URL = '/accounts/login/'





# =======================================================
# MEDIA FILES
# =======================================================

# This defines the base URL for serving user-uploaded media
MEDIA_URL = '/media/'

# This sets the directory where uploaded files will be stored during development
MEDIA_ROOT = BASE_DIR / 'media'





# =======================================================
# STRIPE
# =======================================================

# Public key for stripe
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')

# Secret key for stripe
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')