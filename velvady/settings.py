"""
Django settings for velvady project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""





# =======================================================
# IMPORTS
# =======================================================

import os
import sys
import logging
import dj_database_url
from pathlib import Path
from django.urls import reverse_lazy
from dotenv import load_dotenv




# =======================================================
# BASE DIRECTORY
# =======================================================

# I am using BASE_DIR to construct full paths relative to the project root
BASE_DIR = Path(__file__).resolve().parent.parent





# =======================================================
# ENVIRONMENT VARIABLES
# =======================================================

# Load values from .env located at the project root
load_dotenv(dotenv_path=BASE_DIR / '.env')






# Secret key for stripe
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-placeholder")





# Development settings
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
ALLOWED_HOSTS = [h.strip() for h in os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',') if h.strip()]
CSRF_TRUSTED_ORIGINS = [o.strip() for o in os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',') if o.strip()]

LOG_LEVEL = 'DEBUG' if DEBUG else 'INFO'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
}





# =======================================================
# INSTALLED APPLICATIONS
# =======================================================

# These are the built-in Django apps and custom apps used in this project
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",

    # Custom project apps
    "core",
    "accounts",
    "products",
    'cloudinary',
    'cloudinary_storage',
]

# I am setting Django to use my custom user model from the 'accounts' app
AUTH_USER_MODEL = 'accounts.CustomUser'

# Sites framework (used for absolute URLs without a request)
SITE_ID = int(os.getenv('SITE_ID', '1'))
SITE_URL = os.getenv('SITE_URL', 'https://localhost:30004')






# =======================================================
# MIDDLEWARE CONFIGURATION
# =======================================================

# Middleware is used to process requests globally before reaching a view
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]





# =======================================================
# URL CONFIGURATION
# =======================================================

# The root URLConf points to the top-level routing file
ROOT_URLCONF = "velvady.urls"





# =======================================================
# TEMPLATE CONFIGURATION
# =======================================================

# Django will load HTML templates from all app directoriesSECRET_KEY
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # No custom template folders needed for now
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]





# =======================================================
# WSGI CONFIGURATION
# =======================================================

# This sets the entry point for running the project via WSGI server
WSGI_APPLICATION = "velvady.wsgi.application"





# =======================================================
# DATABASE CONFIGURATION
# =======================================================

# Database configuration
DATABASE_URL = os.getenv('DATABASE_URL', '')
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=600,
            ssl_require=not DEBUG
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }





# =======================================================
# PASSWORD VALIDATION FOR USER SECURITY
# =======================================================

# I am enforcing strong password rules for the site to meet MP4 distinction-level security expectations
# These validators ensure the password is not too short, not too common, and not entirely numeric
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 12},  # I have raised the minimum length to 12 characters for added security
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]





# =======================================================
# INTERNATIONALISATION SETTINGS
# =======================================================

# I am keeping default English and UTC time zone for a UK-based project
LANGUAGE_CODE = "en-us"
TIME_ZONE = 'Europe/London'
USE_I18N = True
USE_TZ = True





# =======================================================
# PRIMARY KEY FIELD TYPE
# =======================================================

# I am setting the default type for primary keys on all models
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"





# =======================================================
# SESSION SECURITY SETTINGS
# =======================================================

# I am limiting session lifetime to 30 minutes of inactivity to protect user data
SESSION_COOKIE_AGE = 1800  # 30 minutes in seconds

# This setting ensures users are logged out when they close the browser
SESSION_EXPIRE_AT_BROWSER_CLOSE = True





# =======================================================
# LOGIN / LOGOUT REDIRECTION
# =======================================================

# Redirect to dashboard after login
LOGIN_REDIRECT_URL = reverse_lazy('dashboard')

# Redirect to homepage after logout
LOGOUT_REDIRECT_URL = reverse_lazy('core:home')





# =======================================================
# STATIC & MEDIA FILES
# =======================================================

# Static files such as CSS and JavaScript are served from this URL
STATIC_URL = '/static/'

# This tells Django where to find static files in development
STATICFILES_DIRS = [
    BASE_DIR / 'core' / 'static',
]

# This is used only when running collectstatic for deployment
STATIC_ROOT = BASE_DIR / 'staticfiles'

# This defines the base URL for serving user-uploaded media
MEDIA_URL = '/media/'

# This sets the directory where uploaded files will be stored during development
MEDIA_ROOT = BASE_DIR / 'media'

# Use Django 5 STORAGES API for media & static backends
STORAGES = {
    "default": {"BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage"},
    "staticfiles": {"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"},
}





# =======================================================
# STRIPE
# =======================================================

# Public key for stripe
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')

STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")





# =======================================================
# EMAIL CONFIGURATION
# =======================================================

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER





# =======================================================
# CLOUDINARY MEDIA STORAGE
# =======================================================

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET'),
}





# =======================================================
# PRODUCTION SECURITY (applies when DEBUG=False)
# =======================================================
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True





# Trust reverse proxy for HTTPS detection
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Honor proxy-provided Host header (so :30004 is preserved)
USE_X_FORWARDED_HOST = os.getenv('USE_X_FORWARDED_HOST', 'False').lower() in ('1', 'true', 'yes')